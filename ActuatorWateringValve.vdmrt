class WateringValve is subclass of Actuator

operations

public WateringValve: nat * TypeEnums`nodeType ==> WateringValve
WateringValve (id, ptype) == ( 
	ID := id;
  type := ptype;
  action := <OPEN>;
 );

public Switch: () ==> ()
Switch() ==
 (dcl status: TypeEnums`actionType := GetAction();
  if (status = <OPEN>)
  then (World`env.IncHumid();
        World`env.IncHumid();
        World`env.DecTemp();
        World`env.IncSoilMoisture();
        World`env.IncSoilMoisture();)
  else if (status = <CLOSE>)
	then (World`env.DecSoilMoisture();)
	else if (status = <HALF>)
  then (World`env.IncHumid();
        World`env.DecTemp();
        World`env.IncSoilMoisture(););
 );

async public SetAction: TypeEnums`actionType ==> ()
SetAction(pAct) == action := pAct
pre (pAct = <OPEN>) or (pAct = <CLOSE>) or (pAct = <HALF>);

public GetAction: () ==> TypeEnums`actionType
GetAction() == return action;

sync
  mutex(SetAction, GetAction);

end WateringValve