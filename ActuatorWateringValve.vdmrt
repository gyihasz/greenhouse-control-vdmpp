class WateringValve is subclass of Actuator

instance variables

  finished : bool := false;

operations

public WateringValve: nat * TypeEnums`nodeType ==> WateringValve
WateringValve (id, ptype) == ( 
	ID := id;
  type := ptype;
  action := <OPEN>;
 );

public Switch: () ==> ()
Switch() ==
 (dcl status: TypeEnums`actionType := GetAction();
  if (status = <OPEN>)
  then (
  -- IO`print("- Watering -");
  			World`env.IncHumid();
        World`env.DecTemp();
        World`env.IncSoilMoisture();)
  else if (status = <CLOSE>)
  then (
  -- IO`print("-          -");
  			World`env.DecSoilMoisture(););
 );

async public SetAction: TypeEnums`actionType ==> ()
SetAction(pAct) == action := pAct
pre (pAct = <OPEN>) or (pAct = <CLOSE>);

public GetAction: () ==> TypeEnums`actionType
GetAction() == return action;

public IsFinished: () ==> ()
IsFinished() == skip;

sync
  per IsFinished => finished;
  mutex(SetAction, GetAction);
thread

-- period of thread (period, jitter, delay, offset)
periodic(10000E6,0,0,0) (Switch)

end WateringValve