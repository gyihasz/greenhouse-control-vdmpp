class HostController

values

  private OVERSHOOT_CNT : nat = 2;

instance variables

  private finished    : bool := false;

  private TargetTemp  : nat;
  private Temp        : nat := 0;
  
  private TargetHumid : nat;
  private Humid       : nat := 0;
  
  private TargetMoist : nat;
  private Moist       : nat := 0;
  
  private TargetSmoke : nat;
  private Smoke       : nat := 0;
  
  private NodeList    : map nat to TypeEnums`nodeType := { |-> };
  

  private incTempCnt  : nat := 0;
  private decTempCnt  : nat := 0;
  private decHumidCnt : nat := 0;

operations

public HostController: nat * nat * nat * nat ==> HostController
HostController(target_temp, target_humidity, target_smoke, target_soil_moisture) ==
 (TargetTemp  := target_temp;
  TargetHumid := target_humidity;
  TargetSmoke := target_smoke;
  TargetMoist := target_soil_moisture;
  IO`print("Target Temp\tTarget Humid\tTarge Smoke\tTarget Moist\n");
  IO`print(TargetTemp);
	IO`print("\t");
  IO`print(TargetHumid);
	IO`print("\t");
  IO`print(TargetSmoke);
	IO`print("\t");
  IO`print(TargetMoist);
	IO`print("\n");
	IO`print("Time\tTemp\tHumid\tSmoke\tMoist\n");

 );

public UpdateValues: () ==> ()
UpdateValues() == (
 Temp := GHA`TemperatureNode.GetValue();
 Humid := GHA`HumidityNode.GetValue();
 Moist := GHA`SoilMoistureNode.GetValue();
 Smoke := GHA`SmokeNode.GetValue();
 );

 private ControlActuators : () ==> ()
 ControlActuators () == (

	        dcl tempHigh: bool := TargetTemp + 3 <= Temp;
	        dcl tempExtremeLow: bool := TargetTemp - 3 >= Temp;
	        dcl tempLow: bool := TargetTemp - 1 >= Temp;
	        
	        dcl humidHigh: bool := TargetHumid + 5 <= Humid;
	        dcl humidLow: bool := TargetHumid - 10 >= Humid;
	        
	        dcl smokeHigh: bool := TargetSmoke < Smoke;
	        dcl noSmoke: bool := TargetSmoke = Smoke;
	        
	        dcl moistHigh: bool := TargetMoist + 5 <= Moist;
	        dcl moistLow: bool := TargetMoist -5 >= Moist;
	         
	        if (tempHigh)
	        then (GHA`HeatingNode.SetAction(<DECREMENT>);
	        			GHA`WindowNode.SetAction(<OPEN>);)
    			else if (tempExtremeLow)
	        then (GHA`HeatingNode.SetAction(<INCREMENT>);
	        			GHA`WindowNode.SetAction(<CLOSE>);)
    			else if (tempLow)
	        then (GHA`HeatingNode.SetAction(<HALF>);
	        			GHA`WindowNode.SetAction(<CLOSE>););
    			
    			if (humidHigh)
	        then (GHA`WindowNode.SetAction(<OPEN>);)
    			else if (humidLow)
	        then (GHA`WaterValve.SetAction(<HALF>);
	        			GHA`WindowNode.SetAction(<CLOSE>););
	        			
    			if (moistHigh)
	        then (GHA`WaterValve.SetAction(<CLOSE>);)
    			else if (moistLow)
	        then (GHA`WaterValve.SetAction(<OPEN>););
	        
	        if (smokeHigh)
	        then (GHA`FireSuppressorValve.SetAction(<OPEN>);
				        GHA`WaterValve.SetAction(<CLOSE>);
				        GHA`WindowNode.SetAction(<CLOSE>);
				        GHA`HeatingNode.SetAction(<DECREMENT>);)
    			else if (noSmoke)
	        then (GHA`FireSuppressorValve.SetAction(<CLOSE>););
	        
 );


public AddNode: nat * TypeEnums`nodeType ==> ()
AddNode(id, type) ==
 (NodeList := NodeList ++ {id |-> type};)
pre id not in set dom NodeList
post card(dom NodeList) = card(dom NodeList~) + 1;

private PeriodicReadAndControl: () ==> ()
PeriodicReadAndControl() ==
 (UpdateValues();
  ControlActuators(););

thread

-- period of thread (period, jitter, delay, offset)
periodic(100E6,0,0,0) (PeriodicReadAndControl)

end HostController