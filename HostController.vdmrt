class HostController

values

  private OVERSHOOT_CNT : nat = 2;

instance variables

  private finished    : bool := false;

  private TargetTemp  : nat;
  private Temp        : nat := 0;
  
  private TargetHumid : nat;
  private Humid       : nat := 0;
  
  private TargetMoist : nat;
  private Moist       : nat := 0;
  
  private TargetSmoke : nat;
  private Smoke       : nat := 0;
  
  -- TODO ebben a sensoroknak is benne kellene lenni...
  -- private NodeList    : map nat to TypeEnums`actuatorType := { |-> };
  private NodeList    : map nat to TypeEnums`nodeType := { |-> };
  

  private incTempCnt  : nat := 0;
  private decTempCnt  : nat := 0;
  private decHumidCnt : nat := 0;

operations

public HostController: nat * nat * nat * nat ==> HostController
HostController(target_temp, target_humidity, target_smoke, target_soil_moisture) ==
 (TargetTemp  := target_temp;
  TargetHumid := target_humidity;
  TargetSmoke := target_smoke;
  TargetMoist := target_soil_moisture;
  
  PrintTarget("Temp", TargetTemp);
  PrintTarget("Humid", TargetHumid);
  PrintTarget("Smoke", TargetSmoke);
  PrintTarget("Moist", TargetMoist);
 );
 
public PrintTarget: seq of char * nat ==> ()
	PrintTarget(numberType, value) == (
	IO`print("Target ");
	IO`print(numberType);
	IO`print(": ");
	IO`print(value);
	IO`print("\n");		
);

public UpdateValues: () ==> ()
UpdateValues() == (
 Temp := GHA`TemperatureNode.GetValue();
 Humid := GHA`HumidityNode.GetValue();
 Moist := GHA`SoilMoistureNode.GetValue();
 Smoke := GHA`SmokeNode.GetValue();
 /*
 for all r in set rng NodeList 
  do
   (if (r = <HUMIDSENSOR>)
    then Humid := GHA`HumidityNode.GetValue();
    if (r = <TEMPSENSOR>)
    then Temp := GHA`TemperatureNode.GetValue();
    if (r = <MOISTSENSOR>)
    then Moist := GHA`SoilMoistureNode.GetValue();
    if (r = <SMOKESENSOR>)
    then Smoke := GHA`SmokeNode.GetValue();
   );
   */
 );

public GetTemp: () ==> nat
GetTemp() ==
  return Temp;

public GetHumid: () ==> nat
GetHumid() ==
  return Humid;

public GetSmoke: () ==> nat
GetSmoke() ==
  return Smoke;
  
public GetMoist: () ==> nat
GetMoist() ==
  return Moist;

public Algorithm: () ==> ()
Algorithm() ==
  --cycles(1E11)
 (
 
 /*if (Humid > TargetHumid)
  then decHumidCnt := decHumidCnt + 1
  elseif (Temp > TargetTemp)
  then decTempCnt := decTempCnt + 1
  elseif (Temp < TargetTemp)
  then incTempCnt := incTempCnt + 1;
*/
	run();
 );
 
 private run : () ==> ()
 run () == (
 
 /*
		GHA`HeatingNode.Switch();
		GHA`WindowNode.Switch();
		GHA`WaterValve.Switch();
		GHA`FireSuppressorValve.Switch();
 
 */
 		
 
 
/* 		if (incTempCnt >= OVERSHOOT_CNT)
	  then (GHA`HeatingNode.SetAction(<INCREMENT>);
				  incTempCnt := 0;)
  	else if (decTempCnt >= OVERSHOOT_CNT)
  	then (GHA`HeatingNode.SetAction(<DECREMENT>);
        	decTempCnt := 0;)
	  else if (decHumidCnt >= OVERSHOOT_CNT)
	  then (GHA`WindowNode.SetAction(<OPEN>);
	        decHumidCnt := 0;)
	  else (GHA`WindowNode.SetAction(<CLOSE>);
	        GHA`HeatingNode.SetAction(<NONE>););
	        
	        
  private TargetTemp  : nat;
  private Temp        : nat := 0;
  
  private TargetHumid : nat;
  private Humid       : nat := 0;
  
  private TargetMoist : nat;
  private Moist       : nat := 0;
  
  private TargetSmoke : nat;
  private Smoke       : nat := 0;
	        */
	        dcl tempHigh: bool := TargetTemp + 3 <= Temp;
	        dcl tempLow: bool := TargetTemp - 3 >= Temp;
	        
	        dcl humidHigh: bool := TargetHumid + 3 <= Humid;
	        dcl humidLow: bool := TargetHumid - 3 >= Humid;
	        
	        dcl smokeHigh: bool := TargetSmoke + 3 <= Smoke;
	        dcl smokeLow: bool := TargetSmoke - 3 >= Smoke;
	        
	        dcl moistHigh: bool := TargetMoist + 3 <= Moist;
	        dcl moistLow: bool := TargetMoist - 3 >= Moist;
	        
	        -- IO`print("\n\nCotrolling actuators\n");
	         
	        if (tempHigh)
	        then (GHA`HeatingNode.SetAction(<DECREMENT>);
	        			GHA`WindowNode.SetAction(<OPEN>);)
    			else if (tempLow)
	        then (GHA`HeatingNode.SetAction(<INCREMENT>);
	        			GHA`WindowNode.SetAction(<CLOSE>););
	        			
    			if (humidHigh)
	        then (GHA`WindowNode.SetAction(<OPEN>);
	        			GHA`WaterValve.SetAction(<CLOSE>);)
    			else if (humidLow)
	        then (GHA`WaterValve.SetAction(<OPEN>);
	        			GHA`WindowNode.SetAction(<CLOSE>););
	        			
    			if (moistHigh)
	        then (GHA`WaterValve.SetAction(<CLOSE>);)
    			else if (moistLow)
	        then (GHA`WaterValve.SetAction(<OPEN>););
	        
	        /*
	        IO`print("TargetSmoke: ");
	        IO`print(TargetSmoke);
	        IO`print("       Actual Smoke: ");
	        IO`print(Smoke);
	        IO`print("\n");
	        */
	        if (smokeHigh)
	        then (GHA`FireSuppressorValve.SetAction(<OPEN>);)
    			else if (smokeLow)
	        then (GHA`FireSuppressorValve.SetAction(<CLOSE>););
	        
 );


public AddNode: nat * TypeEnums`nodeType ==> ()
AddNode(id, type) ==
 (NodeList := NodeList ++ {id |-> type};)
pre id not in set dom NodeList
post card(dom NodeList) = card(dom NodeList~) + 1;

public RemoveNode: nat * TypeEnums`nodeType ==> ()
RemoveNode(id, type) ==
 (if (NodeList(id) = type)
  then NodeList := {id} <-: NodeList;)
pre id in set dom NodeList
post card(dom NodeList) = card(dom NodeList~) - 1;

private PeriodicOp: () ==> ()
PeriodicOp() ==
 (UpdateValues();
  Algorithm();
 );

public IsFinished: () ==> ()
IsFinished() == 
  skip;

public Finish: () ==> ()
Finish() == 
  finished := true;

sync
--   mutex(AddNode,RemoveNode);
  per IsFinished => finished;

--
-- Thread definition section
--
thread

-- period of thread (period, jitter, delay, offset)
periodic(100000E6,0,0,0) (PeriodicOp)

end HostController