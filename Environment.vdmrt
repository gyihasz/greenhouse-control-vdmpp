class Environment

instance variables

  private io       : IO := new IO();
  private inlines  : seq of inline := [];
  private outlines : seq of outline := [];
  private simtime  : nat;
  private finished : bool := false;
  private envTemp  : nat := 20;
  private envHumid : nat := 75;
  private envSmoke : nat := 0;
  private envSoilMoisture : nat := 50;

types

-- Input file: TempIn, HumidIn, TimeIn, SmokeIn, SoilMoistureIn
public inline	= nat * nat * nat * nat * nat;
-- Output: Time, TempValue, HumidValue, SmokeValue, SoilMoistureValue
public outline	= int * int * int * int * int;


operations
 
public Environment: seq of char ==> Environment
Environment(fname) ==
 (def mk_ (-,mk_(t,input)) = io.freadval[nat * seq of inline](fname) 
  in
   (inlines := input;
    simtime := t;
    envTemp := 20;
    envHumid := 75;
    envSmoke := 0;
    envSoilMoisture := 50;
   );
 )
pre fname <> []
post inlines <> [] and simtime > 0;

private CreateSignal: () ==> ()
CreateSignal() ==
 (if len inlines > 0
  then (dcl curtime : nat := time;
	def mk_ (tempIn, humidIn, timeIn, smokeIn, soilMoistureIn) = hd inlines 
        in
         (if timeIn <= curtime
          then (SetTemp(tempIn);
                SetHumid(humidIn);
                SetSmoke(smokeIn);
                SetSoilMoisture(soilMoistureIn);              
                inlines := tl inlines;
                return
               );
         );
       );
  if (time >= simtime)
  then (finished := true;
        return;);
 );	

public HandleEvent: () ==> ()
HandleEvent() == (
	IO`print(time);
	
	IO`print("\t");
	IO`print(envTemp);
  IO`print("\t");
  if(envHumid>100) --Humidity over 100% is not relevant in the graph display.
  then(IO`print(100);)
	else(IO`print(envHumid););
  IO`print("\t");
	IO`print(envSmoke);
  IO`print("\t");
	IO`print(envSoilMoisture);
	IO`print("\n");
  outlines := outlines ^ [mk_ (time, envTemp, envHumid, envSmoke, envSoilMoisture)];
);


----------------- SETTERS
public SetTemp: nat ==> ()
SetTemp(temperature) ==
 (envTemp := temperature;
  HandleEvent();
 );

public SetHumid: nat ==> ()
SetHumid(humidity) ==
 (envHumid := humidity;
  HandleEvent();
 );
 
public SetSmoke: nat ==> ()
SetSmoke(smoke) ==
 (envSmoke := smoke;
  HandleEvent();
 );
 
 public SetSoilMoisture: nat ==> ()
SetSoilMoisture(soilMoisture) ==
 (envSoilMoisture := soilMoisture;
  HandleEvent();
 );
 
----------------- READERS
public ReadTemp: () ==> nat
ReadTemp() ==
  return envTemp;

public ReadHumid: () ==> nat
ReadHumid() ==
  return envHumid;
  
public ReadSmoke: () ==> nat
ReadSmoke() ==
  return envSmoke;
  
public ReadSoilMoisture: () ==> nat
ReadSoilMoisture() ==
  return envSoilMoisture;

----------------- INCREMENTS
public IncTemp: () ==> ()
IncTemp() ==
 (envTemp := envTemp + 1;
  HandleEvent();
 );

public IncHumid: () ==> ()
IncHumid() ==
 (envHumid := envHumid + 1;
  HandleEvent();
 );
 
 public InvokeSmoke: () ==> ()
InvokeSmoke() ==
 (envSmoke := 100;
  HandleEvent();
 );
 
  public IncSoilMoisture: () ==> ()
IncSoilMoisture() ==
 (envSoilMoisture := envSoilMoisture + 1;
  HandleEvent();
 );

----------------- DECREMENTS
public DecTemp: () ==> ()
DecTemp() ==
 (envTemp := envTemp - 1;
  HandleEvent();
 );

public DecHumid: () ==> ()
DecHumid() ==
 (envHumid := envHumid - 1;
  HandleEvent();
 );
 
 public DecSmoke: () ==> ()
DecSmoke() ==
  (envSmoke := envSmoke - 2;
 	HandleEvent(););
 
  public DecSoilMoisture: () ==> ()
DecSoilMoisture() ==
 (envSoilMoisture := envSoilMoisture - 1;
  HandleEvent();
 );

----------------- UTILS
public RaiseAlarm: () ==> ()
RaiseAlarm() == 
skip;

public IsFinished: () ==> ()
IsFinished() ==
  skip;
  

sync

  mutex(IncTemp);
  mutex(DecTemp);
  mutex(SetTemp);
  mutex(ReadTemp);
  mutex(ReadTemp, IncTemp, DecTemp, SetTemp);
  
  mutex(IncHumid);
  mutex(DecHumid);
  mutex(SetHumid);
  mutex(ReadHumid);
  mutex(ReadHumid, IncHumid, DecHumid, SetHumid);
  
  mutex(InvokeSmoke);
  mutex(DecSmoke);
  mutex(SetSmoke);
  mutex(ReadSmoke);
  mutex(ReadSmoke, InvokeSmoke, DecSmoke, SetSmoke);
  
  mutex(IncSoilMoisture);
  mutex(DecSoilMoisture);
  mutex(SetSoilMoisture);
  mutex(ReadSoilMoisture);
  mutex(ReadSoilMoisture, IncSoilMoisture, DecSoilMoisture, SetSoilMoisture);
  
  mutex(HandleEvent);
  per IsFinished => finished;

thread

-- period of thread (period, jitter, delay, offset)
periodic(10000E6,0,0,0) (CreateSignal)

end Environment